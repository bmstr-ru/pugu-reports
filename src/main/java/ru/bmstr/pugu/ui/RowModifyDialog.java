/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ru.bmstr.pugu.ui;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;
import org.springframework.stereotype.Component;
import ru.bmstr.pugu.beans.AllBeans;
import ru.bmstr.pugu.db.DatabaseManager;
import ru.bmstr.pugu.domain.*;
import ru.bmstr.pugu.properties.PropertyLoader;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.text.NumberFormat;
import java.time.LocalDateTime;
import java.util.ArrayList;

import static ru.bmstr.pugu.properties.PropertyNames.*;

/**
 * @author bmstr
 */
@Component
public class RowModifyDialog extends JDialog {

    private static final int DEFAULT_WIDTH = 800;
    private static final int DEFAULT_HEIGHT = 350;

    private DefaultComboBoxModel usualCategories;
    private DefaultComboBoxModel ourCategories;
    private DefaultComboBoxModel emptyCategory;


    private Suit modifiableSuit;

    @Autowired
    private MyTableModel tableModel;

    @Autowired
    private PropertyLoader propertyLoader;

    @Autowired
    private DatabaseManager databaseManager;

    private final RowModifyDialog iAm;

    @Autowired
    public RowModifyDialog(Frame parent) {
        super(parent, true);
        iAm = this;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initialize
    public void initialize() {
        this.setSize(new Dimension(DEFAULT_WIDTH, DEFAULT_HEIGHT));
        this.setLocationRelativeTo(this.getOwner());

        NumberFormat numberFormat = NumberFormat.getNumberInstance();
        numberFormat.setMinimumFractionDigits(0);

        usualCategories = new DefaultComboBoxModel(
                ((ArrayList<Category>) databaseManager.retriveAll(Category.class))
                        .stream()
                        .filter(category -> category.getType().getDirection() == Direction.TO_US)
                        .toArray(size -> new Category[size])
        );
        ourCategories = new DefaultComboBoxModel(
                ((ArrayList<Category>) databaseManager.retriveAll(Category.class))
                        .stream()
                        .filter(category -> category.getType().getDirection() == Direction.OUR)
                        .toArray(size -> new Category[size])
        );
        emptyCategory = new DefaultComboBoxModel(new Category[]{Category.EMPTY_CATEGORY});
        suitDataLabel = new JLabel();
        jPanel8 = new JPanel();
        jPanel9 = new JPanel();
        suitTypeLabel = new JLabel();
        suitTypeChoise = new JComboBox(databaseManager.retriveAllWithEmpty(SuitType.class).toArray());
        jPanel10 = new JPanel();
        representativeLabel = new JLabel();
        representativeChoise = new JComboBox(databaseManager.retriveAllWithEmpty(Representative.class).toArray());
        jPanel11 = new JPanel();
        yearLabel = new JLabel();
        Integer currentYear = LocalDateTime.now().getYear();
        yearChoise = new JComboBox(new Integer[]{currentYear - 1, currentYear});
        jPanel1 = new JPanel();
        categoryLabel = new JLabel();
        categoryChoise = new JComboBox(usualCategories);
        jPanel3 = new JPanel();
        defendantLabel = new JLabel();
        defendantChoise = new JComboBox(databaseManager.retriveAllWithEmpty(Defendant.class).toArray());
        jPanel2 = new JPanel();
        plaintiffLabel = new JLabel();
        plaintiffInput = new JTextField();
        jPanel4 = new JPanel();
        initialSumLabel = new JLabel();
        initialSumInput = new JFormattedTextField(numberFormat);
        jPanel5 = new JPanel();
        resultLabel = new JLabel();
        resultChoise = new JComboBox(databaseManager.retriveAllWithEmpty(Result.class).toArray());
        jPanel6 = new JPanel();
        agreedSumLabel = new JLabel();
        agreedSumInput = new JFormattedTextField(numberFormat);
        jPanel7 = new JPanel();
        jPanel12 = new JPanel();
        appealResultLabel = new JLabel();
        appealResultChoise = new JComboBox(databaseManager.retriveAllWithEmpty(Result.class).toArray());
        jPanel13 = new JPanel();
        appealAgreedSumLabel = new JLabel();
        appealAgreedSumInput = new JFormattedTextField(numberFormat);
        hasApeal = new JCheckBox();
        hasCassation = new JCheckBox();
        jPanel14 = new JPanel();
        jPanel15 = new JPanel();
        cassationResultLabel = new JLabel();
        cassationResultChoise = new JComboBox(databaseManager.retriveAllWithEmpty(Result.class).toArray());
        jPanel16 = new JPanel();
        cassationAgreedSumLabel = new JLabel();
        cassationAgreedSumInput = new JFormattedTextField(numberFormat);
        inSupremeCourt = new JCheckBox();
        saveButton = new JButton();

        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);

        suitDataLabel.setText(propertyLoader.getProperty(LABEL_SUIT_DATA));

        suitTypeLabel.setText(propertyLoader.getProperty(LABEL_TYPE));

        suitTypeChoise.addActionListener(event -> {
            setDependantComponents((SuitType) suitTypeChoise.getSelectedItem());
        });

        GroupLayout jPanel9Layout = new GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
                jPanel9Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel9Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(suitTypeLabel)
                                .addGap(18, 18, 18)
                                .addComponent(suitTypeChoise, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
                jPanel9Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel9Layout.createSequentialGroup()
                                .addGroup(jPanel9Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(suitTypeLabel)
                                        .addComponent(suitTypeChoise, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 11, Short.MAX_VALUE))
        );

        representativeLabel.setText(propertyLoader.getProperty(LABEL_REPRESENTATIVE));

        GroupLayout jPanel10Layout = new GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
                jPanel10Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel10Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(representativeLabel)
                                .addGap(18, 18, 18)
                                .addComponent(representativeChoise, 0, 241, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
                jPanel10Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel10Layout.createSequentialGroup()
                                .addGroup(jPanel10Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(representativeLabel)
                                        .addComponent(representativeChoise, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 11, Short.MAX_VALUE))
        );

        yearLabel.setText(propertyLoader.getProperty(LABEL_YEAR));

        GroupLayout jPanel11Layout = new GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
                jPanel11Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel11Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(yearLabel)
                                .addGap(18, 18, 18)
                                .addComponent(yearChoise, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel11Layout.setVerticalGroup(
                jPanel11Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel11Layout.createSequentialGroup()
                                .addGroup(jPanel11Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(yearLabel)
                                        .addComponent(yearChoise, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 11, Short.MAX_VALUE))
        );

        categoryLabel.setText(propertyLoader.getProperty(LABEL_CATEGORY));

        GroupLayout jPanel1Layout = new GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(categoryLabel)
                                .addGap(18, 18, 18)
                                .addComponent(categoryChoise, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(categoryLabel)
                                        .addComponent(categoryChoise, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 11, Short.MAX_VALUE))
        );

        jPanel3.setPreferredSize(new Dimension(139, 25));

        defendantLabel.setText(propertyLoader.getProperty(LABEL_DEFFENDER));

        GroupLayout jPanel3Layout = new GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
                jPanel3Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(defendantLabel)
                                .addGap(18, 18, 18)
                                .addComponent(defendantChoise, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
                jPanel3Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(defendantLabel)
                                        .addComponent(defendantChoise, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 5, Short.MAX_VALUE))
        );

        plaintiffLabel.setText(propertyLoader.getProperty(LABEL_PLAINTIFF));

        GroupLayout jPanel2Layout = new GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
                jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(plaintiffLabel)
                                .addGap(18, 18, 18)
                                .addComponent(plaintiffInput))
        );
        jPanel2Layout.setVerticalGroup(
                jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(plaintiffLabel)
                                        .addComponent(plaintiffInput, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 11, Short.MAX_VALUE))
        );

        jPanel4.setPreferredSize(new Dimension(0, 25));

        initialSumLabel.setText(propertyLoader.getProperty(LABEL_INITIAL_SUMM));

        GroupLayout jPanel4Layout = new GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
                jPanel4Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel4Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(initialSumLabel)
                                .addGap(18, 18, 18)
                                .addComponent(initialSumInput))
        );
        jPanel4Layout.setVerticalGroup(
                jPanel4Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(initialSumLabel)
                                        .addComponent(initialSumInput, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 5, Short.MAX_VALUE))
        );

        jPanel5.setPreferredSize(new Dimension(0, 25));

        resultLabel.setText(propertyLoader.getProperty(LABEL_RESULT));

        GroupLayout jPanel5Layout = new GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
                jPanel5Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel5Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(resultLabel)
                                .addGap(18, 18, 18)
                                .addComponent(resultChoise, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
                jPanel5Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGroup(jPanel5Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(resultLabel)
                                        .addComponent(resultChoise, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 5, Short.MAX_VALUE))
        );

        jPanel6.setPreferredSize(new Dimension(0, 25));

        agreedSumLabel.setText(propertyLoader.getProperty(LABEL_AGREED_SUMM));

        GroupLayout jPanel6Layout = new GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
                jPanel6Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel6Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(agreedSumLabel)
                                .addGap(18, 18, 18)
                                .addComponent(agreedSumInput))
        );
        jPanel6Layout.setVerticalGroup(
                jPanel6Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel6Layout.createSequentialGroup()
                                .addGroup(jPanel6Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(agreedSumLabel)
                                        .addComponent(agreedSumInput, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 5, Short.MAX_VALUE))
        );

        GroupLayout jPanel8Layout = new GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8.setPreferredSize(new Dimension(400, 320));
        jPanel8Layout.setHorizontalGroup(
                jPanel8Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel9, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel10, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel11, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel3, GroupLayout.DEFAULT_SIZE, 347, Short.MAX_VALUE)
                        .addComponent(jPanel2, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel4, GroupLayout.DEFAULT_SIZE, 347, Short.MAX_VALUE)
                        .addComponent(jPanel5, GroupLayout.DEFAULT_SIZE, 347, Short.MAX_VALUE)
                        .addComponent(jPanel6, GroupLayout.DEFAULT_SIZE, 347, Short.MAX_VALUE)
        );
        jPanel8Layout.setVerticalGroup(
                jPanel8Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel8Layout.createSequentialGroup()
                                .addComponent(jPanel9, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel10, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel11, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel3, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel4, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel5, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel6, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        );

        appealResultLabel.setText(propertyLoader.getProperty(LABEL_RESULT));

        GroupLayout jPanel12Layout = new GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
                jPanel12Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel12Layout.createSequentialGroup()
                                .addComponent(appealResultLabel)
                                .addGap(18, 18, 18)
                                .addComponent(appealResultChoise, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel12Layout.setVerticalGroup(
                jPanel12Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel12Layout.createSequentialGroup()
                                .addGroup(jPanel12Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(appealResultLabel)
                                        .addComponent(appealResultChoise, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 11, Short.MAX_VALUE))
        );

        appealAgreedSumLabel.setText(propertyLoader.getProperty(LABEL_AGREED_SUMM));

        GroupLayout jPanel13Layout = new GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
                jPanel13Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel13Layout.createSequentialGroup()
                                .addComponent(appealAgreedSumLabel)
                                .addGap(18, 18, 18)
                                .addComponent(appealAgreedSumInput))
        );
        jPanel13Layout.setVerticalGroup(
                jPanel13Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel13Layout.createSequentialGroup()
                                .addGroup(jPanel13Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(appealAgreedSumLabel)
                                        .addComponent(appealAgreedSumInput, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 11, Short.MAX_VALUE))
        );

        GroupLayout jPanel7Layout = new GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
                jPanel7Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel12, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel13, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
                jPanel7Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(jPanel12, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel13, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        );

        hasApeal.setText(propertyLoader.getProperty(HAS_APPEAL));
        hasApeal.addItemListener(event -> {
            if (hasApeal.isSelected()) {
                appealAgreedSumLabel.setEnabled(true);
                appealAgreedSumInput.setEnabled(true);
                appealResultLabel.setEnabled(true);
                appealResultChoise.setEnabled(true);
            } else {
                appealAgreedSumLabel.setEnabled(false);
                appealAgreedSumInput.setEnabled(false);
                appealResultLabel.setEnabled(false);
                appealResultChoise.setEnabled(false);
            }
        });

        hasCassation.setText(propertyLoader.getProperty(HAS_CASSATION));
        hasCassation.addItemListener(event -> {
            if (hasCassation.isSelected()) {
                cassationAgreedSumLabel.setEnabled(true);
                cassationAgreedSumInput.setEnabled(true);
                cassationResultLabel.setEnabled(true);
                cassationResultChoise.setEnabled(true);
                inSupremeCourt.setEnabled(true);
            } else {
                cassationAgreedSumLabel.setEnabled(false);
                cassationAgreedSumInput.setEnabled(false);
                cassationResultLabel.setEnabled(false);
                cassationResultChoise.setEnabled(false);
                inSupremeCourt.setEnabled(false);
            }
        });


        cassationResultLabel.setText(propertyLoader.getProperty(LABEL_RESULT));

        GroupLayout jPanel15Layout = new GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
                jPanel15Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel15Layout.createSequentialGroup()
                                .addComponent(cassationResultLabel)
                                .addGap(18, 18, 18)
                                .addComponent(cassationResultChoise, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel15Layout.setVerticalGroup(
                jPanel15Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel15Layout.createSequentialGroup()
                                .addGroup(jPanel15Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(cassationResultLabel)
                                        .addComponent(cassationResultChoise, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 11, Short.MAX_VALUE))
        );

        jPanel16.setPreferredSize(new Dimension(0, 25));

        cassationAgreedSumLabel.setText(propertyLoader.getProperty(LABEL_AGREED_SUMM));

        GroupLayout jPanel16Layout = new GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
                jPanel16Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel16Layout.createSequentialGroup()
                                .addComponent(cassationAgreedSumLabel)
                                .addGap(18, 18, 18)
                                .addComponent(cassationAgreedSumInput, GroupLayout.DEFAULT_SIZE, 191, Short.MAX_VALUE))
        );
        jPanel16Layout.setVerticalGroup(
                jPanel16Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel16Layout.createSequentialGroup()
                                .addGroup(jPanel16Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(cassationAgreedSumLabel)
                                        .addComponent(cassationAgreedSumInput, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 5, Short.MAX_VALUE))
        );

        inSupremeCourt.setText(propertyLoader.getProperty(IN_SUPREME_COURT));
        inSupremeCourt.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jCheckBox3ActionPerformed(evt);
            }
        });

        GroupLayout jPanel14Layout = new GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
                jPanel14Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel15, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel16, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
                        .addComponent(inSupremeCourt, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel14Layout.setVerticalGroup(
                jPanel14Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel14Layout.createSequentialGroup()
                                .addComponent(jPanel15, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel16, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(inSupremeCourt)
                                .addContainerGap(24, Short.MAX_VALUE))
        );

        saveButton.setText(propertyLoader.getProperty(BUTTON_SAVE));
        saveButton.addActionListener(action -> {
            if (SuitType.isEmpty((SuitType) suitTypeChoise.getSelectedItem())) {
                JOptionPane.showMessageDialog(iAm,
                        propertyLoader.getProperty(SAVE_ERROR_TYPE_EMPTY),
                        propertyLoader.getProperty(SAVE_ERROR_TITLE),
                        JOptionPane.ERROR_MESSAGE);
            } else if (!(sumIsValid(initialSumInput))) {
                JOptionPane.showMessageDialog(iAm,
                        propertyLoader.getProperty(SAVE_ERROR_INVALID_INITIAL_SUMM),
                        propertyLoader.getProperty(SAVE_ERROR_TITLE),
                        JOptionPane.ERROR_MESSAGE);
            } else if (!(sumIsValid(agreedSumInput))) {
                JOptionPane.showMessageDialog(iAm,
                        propertyLoader.getProperty(SAVE_ERROR_INVALID_AGREED_SUMM),
                        propertyLoader.getProperty(SAVE_ERROR_TITLE),
                        JOptionPane.ERROR_MESSAGE);
            } else {
                if (modifiableSuit != null) {
                    modifiableSuit.setRepresentative(Representative.isEmpty((Representative) representativeChoise.getSelectedItem()) ? null : (Representative) representativeChoise.getSelectedItem());
                    modifiableSuit.setType((SuitType.isEmpty((SuitType) suitTypeChoise.getSelectedItem())) ? null : (SuitType) suitTypeChoise.getSelectedItem());
                    modifiableSuit.setYear((Integer) yearChoise.getSelectedItem());
                    modifiableSuit.setCategory((Category.isEmpty((Category) categoryChoise.getSelectedItem())) ? null : (Category) categoryChoise.getSelectedItem());
                    modifiableSuit.setPlaintiff(plaintiffInput.getText() == null ? "" : plaintiffInput.getText());
                    modifiableSuit.setDefendant((Defendant.isEmpty((Defendant) defendantChoise.getSelectedItem())) ? null : (Defendant) defendantChoise.getSelectedItem());
                    modifiableSuit.setInitialSumm(initialSumInput.getValue() == null ? 0 : ((Number) initialSumInput.getValue()).intValue());
                    modifiableSuit.setAgreedSumm(agreedSumInput.getValue() == null ? 0 : ((Number) agreedSumInput.getValue()).intValue());
                    modifiableSuit.setResult((Result.isEmpty((Result) resultChoise.getSelectedItem())) ? null : (Result) resultChoise.getSelectedItem());
                    if (hasApeal.isSelected()) {
                        if (modifiableSuit.getAppeal() == null) {
                            Appeal appeal = Appeal.getBuilder()
                                    .withResult((Result.isEmpty((Result) appealResultChoise.getSelectedItem())) ? null : (Result) appealResultChoise.getSelectedItem())
                                    .withAgreedSum(appealAgreedSumInput.getValue() == null ? 0 : ((Number) appealAgreedSumInput.getValue()).intValue())
                                    .build();
                            databaseManager.create(appeal);
                            modifiableSuit.setAppeal(appeal);
                        } else {
                            modifiableSuit.getAppeal().setResult((Result.isEmpty((Result) appealResultChoise.getSelectedItem())) ? null : (Result) appealResultChoise.getSelectedItem());
                            modifiableSuit.getAppeal().setAgreedSum(appealAgreedSumInput.getValue() == null ? 0 : ((Number) appealAgreedSumInput.getValue()).intValue());
                            databaseManager.update(modifiableSuit.getAppeal());
                        }
                    } else if (modifiableSuit.getAppeal() != null) {
                        databaseManager.delete(modifiableSuit.getAppeal());
                        modifiableSuit.setAppeal(null);
                    }
                    if (hasCassation.isSelected()) {
                        if (modifiableSuit.getCassation() == null) {
                            Cassation cassation = Cassation.getBuilder()
                                    .withResult((Result.isEmpty((Result) cassationResultChoise.getSelectedItem())) ? null : (Result) cassationResultChoise.getSelectedItem())
                                    .withAgreedSum(cassationAgreedSumInput.getValue() == null ? 0 : ((Number) cassationAgreedSumInput.getValue()).intValue())
                                    .withInSupremeCourt(inSupremeCourt.isSelected())
                                    .build();
                            databaseManager.create(cassation);
                            modifiableSuit.setCassation(cassation);
                        } else {
                            modifiableSuit.getCassation().setResult((Result.isEmpty((Result) cassationResultChoise.getSelectedItem())) ? null : (Result) cassationResultChoise.getSelectedItem());
                            modifiableSuit.getCassation().setAgreedSum(cassationAgreedSumInput.getValue() == null ? 0 : ((Number) cassationAgreedSumInput.getValue()).intValue());
                            databaseManager.update(modifiableSuit.getCassation());
                        }
                    } else if (modifiableSuit.getCassation() != null) {
                        databaseManager.delete(modifiableSuit.getCassation());
                        modifiableSuit.setCassation(null);
                    }
                    databaseManager.update(modifiableSuit);
                    tableModel.reDraw();
                } else {
                    Appeal appeal = null;
                    Cassation cassation = null;
                    if (hasApeal.isSelected()) {
                        appeal = Appeal.getBuilder()
                                .withResult((Result.isEmpty((Result) appealResultChoise.getSelectedItem())) ? null : (Result) appealResultChoise.getSelectedItem())
                                .withAgreedSum(appealAgreedSumInput.getValue() == null ? 0 : ((Number) appealAgreedSumInput.getValue()).intValue())
                                .build();
                        databaseManager.create(appeal);
                    }

                    if (hasCassation.isSelected()) {
                        cassation = Cassation.getBuilder()
                                .withResult((Result.isEmpty((Result) cassationResultChoise.getSelectedItem())) ? null : (Result) cassationResultChoise.getSelectedItem())
                                .withAgreedSum(cassationAgreedSumInput.getValue() == null ? 0 : ((Number) cassationAgreedSumInput.getValue()).intValue())
                                .withInSupremeCourt(inSupremeCourt.isSelected())
                                .build();
                        databaseManager.create(cassation);
                    }

                    Suit suit = Suit.getBuilder()
                            .withRepresentative(Representative.isEmpty((Representative) representativeChoise.getSelectedItem()) ? null : (Representative) representativeChoise.getSelectedItem())
                            .withType((SuitType.isEmpty((SuitType) suitTypeChoise.getSelectedItem())) ? null : (SuitType) suitTypeChoise.getSelectedItem())
                            .withYear((Integer) yearChoise.getSelectedItem())
                            .withCategory((Category.isEmpty((Category) categoryChoise.getSelectedItem())) ? null : (Category) categoryChoise.getSelectedItem())
                            .withDefendant((Defendant.isEmpty((Defendant) defendantChoise.getSelectedItem())) ? null : (Defendant) defendantChoise.getSelectedItem())
                            .withPlaintiff(plaintiffInput.getText() == null ? "" : plaintiffInput.getText())
                            .withInitialSumm(initialSumInput.getValue() == null ? 0 : ((Number) initialSumInput.getValue()).intValue())
                            .withAgreedSumm(agreedSumInput.getValue() == null ? 0 : ((Number) agreedSumInput.getValue()).intValue())
                            .withResult((Result.isEmpty((Result) resultChoise.getSelectedItem())) ? null : (Result) resultChoise.getSelectedItem())
                            .withAppeal(appeal)
                            .withCassation(cassation)
                            .build();
                    tableModel.addRow(suit);
                }
                iAm.setVisible(false);
            }
        });

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addComponent(suitDataLabel)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(10, 10, 10)
                                                .addComponent(jPanel8, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addComponent(hasApeal)
                                        .addComponent(hasCassation)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(21, 21, 21)
                                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(jPanel7, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(jPanel14, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(saveButton, GroupLayout.PREFERRED_SIZE, 276, GroupLayout.PREFERRED_SIZE)
                                .addGap(173, 173, 173))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(suitDataLabel)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jPanel8, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(hasApeal)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jPanel7, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(hasCassation)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jPanel14, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(saveButton)
                                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initialize

    private void setDependantComponents(SuitType type) {
        if (type.getDirection() == null) {
            plaintiffLabel.setText(propertyLoader.getProperty(LABEL_PLAINTIFF));
            defendantLabel.setText(propertyLoader.getProperty(LABEL_DEFFENDER));
            categoryChoise.setModel(emptyCategory);
        } else {
            switch (type.getDirection()) {
                case TO_US:
                    plaintiffLabel.setText(propertyLoader.getProperty(LABEL_PLAINTIFF));
                    defendantLabel.setText(propertyLoader.getProperty(LABEL_DEFFENDER));
                    categoryChoise.setModel(usualCategories);
                    break;
                case OUR:
                    plaintiffLabel.setText(propertyLoader.getProperty(LABEL_DEFFENDER));
                    defendantLabel.setText(propertyLoader.getProperty(LABEL_PLAINTIFF));
                    categoryChoise.setModel(ourCategories);
                    break;
                default:
                    plaintiffLabel.setText(propertyLoader.getProperty(LABEL_PLAINTIFF));
                    defendantLabel.setText(propertyLoader.getProperty(LABEL_DEFFENDER));
                    categoryChoise.setModel(emptyCategory);
                    break;
            }
        }
    }

    public void showAddRow(Representative representative) {
        modifiableSuit = null;
        this.setTitle(propertyLoader.getProperty(SUIT_ENTER));
        suitTypeChoise.setSelectedIndex(0);
        if (Representative.isEmpty(representative)) {
            representativeChoise.setSelectedIndex(0);
        } else {
            representativeChoise.setSelectedItem(representative);
        }
        yearChoise.setSelectedItem(LocalDateTime.now().getYear());
        categoryChoise.setSelectedIndex(0);
        defendantChoise.setSelectedIndex(0);
        plaintiffInput.setText("");
        initialSumInput.setValue(0);
        agreedSumInput.setValue(0);
        resultChoise.setSelectedIndex(0);
        hasApeal.setSelected(false);
        appealAgreedSumLabel.setEnabled(false);
        appealAgreedSumInput.setEnabled(false);
        appealAgreedSumInput.setValue(0);
        appealResultLabel.setEnabled(false);
        appealResultChoise.setEnabled(false);
        appealResultChoise.setSelectedIndex(0);
        hasCassation.setSelected(false);
        cassationAgreedSumLabel.setEnabled(false);
        cassationAgreedSumInput.setEnabled(false);
        cassationAgreedSumInput.setValue(0);
        cassationResultLabel.setEnabled(false);
        cassationResultChoise.setEnabled(false);
        cassationResultChoise.setSelectedIndex(0);
        inSupremeCourt.setEnabled(false);
        this.setVisible(true);
    }

    public void showModifyRow(Suit suit) {
        modifiableSuit = suit;
        this.setTitle(propertyLoader.getProperty(SUIT_FROM) + suit.getPlaintiff());
        suitTypeChoise.setSelectedItem(suit.getType());
        representativeChoise.setSelectedItem(suit.getRepresentative());
        yearChoise.setSelectedItem(suit.getYear());
        categoryChoise.setSelectedItem(suit.getCategory());
        defendantChoise.setSelectedItem(suit.getDefendant());
        plaintiffInput.setText(suit.getPlaintiff());
        initialSumInput.setValue(suit.getInitialSumm());
        agreedSumInput.setValue(suit.getAgreedSumm());
        resultChoise.setSelectedItem(suit.getResult());
        setDependantComponents(suit.getType());

        if (suit.getAppeal() == null) {
            hasApeal.setSelected(false);
            appealAgreedSumLabel.setEnabled(false);
            appealAgreedSumInput.setEnabled(false);
            appealAgreedSumInput.setValue(0);
            appealResultLabel.setEnabled(false);
            appealResultChoise.setEnabled(false);
            appealResultChoise.setSelectedIndex(0);
        } else {
            hasApeal.setSelected(true);
            appealAgreedSumLabel.setEnabled(true);
            appealAgreedSumInput.setEnabled(true);
            appealAgreedSumInput.setValue(suit.getAppeal().getAgreedSum());
            appealResultLabel.setEnabled(true);
            appealResultChoise.setEnabled(true);
            if (Result.isEmpty(suit.getAppeal().getResult())) {
                appealResultChoise.setSelectedIndex(0);
            } else {
                appealResultChoise.setSelectedItem(suit.getAppeal().getResult());
            }
        }

        if (suit.getCassation() == null) {
            hasCassation.setSelected(false);
            cassationAgreedSumLabel.setEnabled(false);
            cassationAgreedSumInput.setEnabled(false);
            cassationAgreedSumInput.setValue(0);
            cassationResultLabel.setEnabled(false);
            cassationResultChoise.setEnabled(false);
            cassationResultChoise.setSelectedIndex(0);
        } else {
            hasCassation.setSelected(true);
            cassationAgreedSumLabel.setEnabled(true);
            cassationAgreedSumInput.setEnabled(true);
            cassationAgreedSumInput.setValue(suit.getCassation().getAgreedSum());
            cassationResultLabel.setEnabled(true);
            cassationResultChoise.setEnabled(true);
            if (Result.isEmpty(suit.getCassation().getResult())) {
                cassationResultChoise.setSelectedIndex(0);
            } else {
                cassationResultChoise.setSelectedItem(suit.getCassation().getResult());
            }
        }
        this.setVisible(true);
    }

    private void jComboBox1ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jCheckBox1ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jCheckBox2ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    private void jCheckBox3ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jCheckBox3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox3ActionPerformed

    private void jButton1ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception ex) {
            ex.printStackTrace();
        }

        final AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(AllBeans.class);
        AllBeans.setContext(ctx);
//        final DatabaseManager dbManager = ctx.getBean(DatabaseManager.class);
//        dbManager.createStaticDatabase();
        final RowModifyDialog window = ctx.getBean(RowModifyDialog.class);
        SwingUtilities.invokeLater(() -> {
            window.initialize();
            window.setVisible(true);
        });
        Runtime.getRuntime().addShutdownHook(new Thread(() -> ctx.close()));

    }

    private static boolean sumIsValid(JFormattedTextField field) {
        try {
            ((Number) field.getValue()).intValue();
            return true;
        } catch (Exception e) {
            return false;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton saveButton;
    private JCheckBox hasApeal;
    private JCheckBox hasCassation;
    private JCheckBox inSupremeCourt;
    private JComboBox suitTypeChoise;
    private JComboBox representativeChoise;
    private JComboBox yearChoise;
    private JComboBox categoryChoise;
    private JComboBox defendantChoise;
    private JComboBox resultChoise;
    private JComboBox appealResultChoise;
    private JComboBox cassationResultChoise;
    private JLabel representativeLabel;
    private JLabel appealResultLabel;
    private JLabel suitDataLabel;
    private JLabel suitTypeLabel;
    private JLabel cassationResultLabel;
    private JLabel cassationAgreedSumLabel;
    private JLabel yearLabel;
    private JLabel categoryLabel;
    private JLabel defendantLabel;
    private JLabel plaintiffLabel;
    private JLabel initialSumLabel;
    private JLabel resultLabel;
    private JLabel agreedSumLabel;
    private JLabel appealAgreedSumLabel;
    private JPanel jPanel1;
    private JPanel jPanel10;
    private JPanel jPanel11;
    private JPanel jPanel12;
    private JPanel jPanel13;
    private JPanel jPanel14;
    private JPanel jPanel15;
    private JPanel jPanel16;
    private JPanel jPanel2;
    private JPanel jPanel3;
    private JPanel jPanel4;
    private JPanel jPanel5;
    private JPanel jPanel6;
    private JPanel jPanel7;
    private JPanel jPanel8;
    private JPanel jPanel9;
    private JTextField plaintiffInput;
    private JFormattedTextField initialSumInput;
    private JFormattedTextField agreedSumInput;
    private JFormattedTextField appealAgreedSumInput;
    private JFormattedTextField cassationAgreedSumInput;
    // End of variables declaration//GEN-END:variables
}
